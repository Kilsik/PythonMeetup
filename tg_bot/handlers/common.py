import json
import random
import os
from contextlib import suppress
from datetime import timedelta

from django.conf import settings
from django.utils.datetime_safe import datetime
from django.utils.timezone import now

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, TelegramError, Update, LabeledPrice
from telegram.ext import CallbackContext


from tg_bot.models import Event, User, Speech


def answer_to_user(
        update: Update,
        context: CallbackContext,
        text,
        keyboard: list[list[InlineKeyboardButton]] = None,
        image=None,
        add_back_button=True,
        parse_mode=None
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–µ
    :param update: Update
    :param context: Context
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param keyboard: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param image: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
    :param add_back_button: –ï—Å–ª–∏ True, —Ç–æ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å callback_data="back"
    :param parse_mode: –†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Markdown, HTML –∏–ª–∏ None
    """

    if not keyboard:
        keyboard = []
    if add_back_button:
        keyboard.append(
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')]
        )

    if not image:
        try:
            message = context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=update.effective_message.message_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=parse_mode
            )
        except TelegramError:
            pass
        else:
            return message

    if image:
        with open(os.path.join(settings.BASE_DIR, image.strip(r'\/')), 'rb') as photo:
            message = context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo.read(),
                caption=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=parse_mode
            )
    else:
        message = context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=parse_mode
        )
    with suppress(TelegramError):
        context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.effective_message.message_id
        )
    return message


def show_start_menu(update: Update, context):
    user_id = update.effective_chat.id
    context.user_data['current_event'] = None
    context.user_data['out'] = []
    keyboard = [
        [InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data='future_events')]
    ]

    event = Event.objects.get_current_or_closest()
    if event:
        button_text = f'üî• –°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç {event.title}' if event.started_at < now() else f'üîú –°–∫–æ—Ä–æ {event.title}'
        keyboard.insert(
            0,
            [InlineKeyboardButton(button_text, callback_data=event.id)]
        )

    user, created = User.objects.get_or_create(
        telegram_id=user_id,
        defaults={
            'nickname': update.effective_chat.username or user_id,
        }
    )
    if user.is_admin:
        keyboard.append(
            [InlineKeyboardButton('üÜï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='create_event')]
        )

    text = '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PythonMeetup</b>\n' \
           '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π, –ø–æ—Å–≤—è—â–µ–Ω–Ω—ã—Ö —Ç–µ–º–µ Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. ' \
           '–ê —Ç–∞–∫ –∂–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—ã—Å—Ç—É–ø–∞—é—â–µ–º—É –∏ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≤ —Ö–æ–¥–µ —Å–∞–º–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.'
    answer_to_user(
        update,
        context,
        text=text,
        keyboard=keyboard,
        image='logo.png',
        add_back_button=False,
        parse_mode='HTML'
    )

    return 'HANDLE_MAIN_MENU'


def show_event(update, context, event_id):
    context.user_data['current_event'] = event_id

    event = Event.objects.get(id=int(event_id))
    event_title = event.title
    event_text = event.description

    user_id = update.effective_chat.id
    user = User.objects.get(telegram_id=user_id)

    keyboard = [
        [InlineKeyboardButton('üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π', callback_data='speech_list')]
    ]

    if event.started_at and event.started_at <= now():
        keyboard.append(
            [InlineKeyboardButton('‚ùî –í–æ–ø—Ä–æ—Å –≤—ã—Å—Ç—É–ø–∞—é—â–µ–º—É', callback_data='ask'),
             InlineKeyboardButton('üôã –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è', callback_data='meet')]
        )

    if user in event.organizers.all():
        keyboard.append(
            [InlineKeyboardButton('‚öô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='edit')]
        )
    else:
        keyboard.append(
            [InlineKeyboardButton('üí≥ –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å', callback_data='donate')]
        )

    text = f'<b>{event_title}</b>'
    if not event.started_at:
        text += '\n<b>–°—Ä–æ–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã</b>'
    elif event.started_at < now():
        text += f'\n<b>–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>.\n' \
                f'–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è {event.finished_at.strftime("%d.%m.%Y")}.'
    else:
        text += f'\n–ë—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å {event.started_at.strftime("%d.%m.%Y")}' \
                f' –ø–æ {event.finished_at.strftime("%d.%m.%Y")}.'
    text += f'\n\n{event_text}'

    answer_to_user(
        update,
        context,
        text=text,
        image=f'media/{event.image.url}' if event.image else None,
        keyboard=keyboard,
        parse_mode='HTML'
    )
    return 'HANDLE_EVENT_MENU'


def show_speech_list(update, context, event_id):
    speeches = Speech.objects.filter(event=event_id).order_by('started_at')
    speech_list = [
        f'<b>{speech.started_at.strftime("%H:%M")}-{speech.finished_at.strftime("%H:%M")}</b> {speech.title}'
        for speech in speeches
    ]
    text = '\n'.join(speech_list) or '–ï—â–µ –Ω–µ –∑–∞—è–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞'
    answer_to_user(
        update,
        context,
        text=text,
        parse_mode='HTML'
    )
    return 'HANDLE_SPEECH_LIST_MENU'


def ask(update, context):
    speech = Speech.objects.get_current()
    if speech:
        speaker = speech.speaker
        text = f'–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n–¢–µ–∫—É—â–∏–π —Å–ø–∏–∫–µ—Ä - <b>{speaker.fullname}</b>'
        context.user_data['speaker_id'] = speaker.telegram_id
    else:
        text = '–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è'
    message = answer_to_user(
        update,
        context,
        text,
        parse_mode='HTML'
    )
    context.user_data['msg_to_delete'] = message.message_id
    return 'HANDLE_QUESTION'


def send_question(update, context, question):
    user = User.objects.get(telegram_id=update.effective_chat.id)
    text = f'–í–æ–ø—Ä–æ—Å –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è {user.fullname}:\n\n{question}'
    context.bot.send_message(
        chat_id=context.user_data.pop('speaker_id'),
        text=text
    )
    return show_event(update, context, context.user_data['current_event'])


def meet(update, context):
    user_id = update.effective_chat.id
    name = update.effective_chat.username
    member, _ = User.objects.get_or_create(telegram_id=user_id, nickname=name)
    event = Event.objects.get(pk=context.user_data['current_event'])
    members = event.meeters.exclude(telegram_id__in=context.user_data['out'])
    out_count = len(context.user_data['out']) + 1
    if member in members:
        if event.meeters.count() - out_count:
            meeter = random.choice(members.exclude(telegram_id=user_id))
            context.user_data['out'].append(meeter.telegram_id)
            text = f'–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {meeter.fullname}.\n–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {meeter.activity}\n–ü—Ä–∏—à–µ–ª —Å —Ü–µ–ª—å—é: {meeter.purpose}'
            keyboard = []
            keyboard.append(
                [InlineKeyboardButton('üëç –•–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å', callback_data=meeter.telegram_id),
                 InlineKeyboardButton('üí© –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ', callback_data='next')]
            )
            answer_to_user(
                update,
                context,
                text,
                add_back_button=False,
                keyboard=keyboard,
            )
        else:
            text = '–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∂–µ–ª–∞—é—â–∏—Ö –ø–æ–æ–±—â–∞—Ç—å—Å—è.'
            answer_to_user(
                update,
                context,
                text,
            )
        return 'HANDLE_MEETING'
    elif not member.fullname:
        answer_to_user(
            update,
            context,
            text='–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è',
            add_back_button=False,
        )
        return 'HANDLE_FULLNAME'
    else:
        return ask_age(update, context)


def donate(update, context):
    chat_id = update.message.chat_id
    title = "–î–æ–Ω–∞—Ç"
    description = "Donate using python-telegram-bot"
    payload = "Custom-Payload"
    provider_token = settings.PAYMENT_TOKEN
    currency = "RUB"
    price = 10
    prices = [LabeledPrice("–î–æ–Ω–∞—Ç", price * 100)]

    context.bot.send_invoice(
        chat_id, title, description, payload, provider_token, currency, prices
    )


def precheckout_callback(update, context):
    query = update.pre_checkout_query
    if query.invoice_payload != 'Custom-Payload':
        query.answer(ok=False, error_message="–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        query.answer(ok=True)


def successful_payment_callback(update, context):
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–∂–µ—Ä—Ç–æ–≤–∞–≤–∞–Ω–∏–µ!")
    return show_start_menu(update, context)

  
def show_meeter(update, context: CallbackContext, meeter_id):
    meeter = User.objects.get(telegram_id=meeter_id)
    nickname = meeter.nickname
    text = f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å {meeter.fullname} –ø–æ —Å—Å—ã–ª–∫–µ https://t.me/{nickname}'
    answer_to_user(
            update,
            context,
            text,
            add_back_button=True,
            )
    return 'HANDLE_MEETING'


def show_future_events(update, context):
    context.user_data['current_event'] = None
    events = Event.objects.filter_futures()
    keyboard = []
    if events:
        text = '–í–æ—Ç –∫–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–π–¥—É—Ç –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏'
        keyboard.extend([
            [InlineKeyboardButton(event.title, callback_data=event.pk)]
            for event in events
        ])
    else:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è'

    answer_to_user(
        update,
        context,
        text=text,
        keyboard=keyboard
    )
    return 'HANDLE_FUTURE_EVENTS'


def ask_for_event_title(update, context):
    text = '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    message = answer_to_user(
        update,
        context,
        text,
    )
    context.user_data['msg_to_delete'] = message.message_id
    return 'HANDLE_EVENT_TITLE'


def ask_for_event_text(update, context):
    text = '–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    message = answer_to_user(
        update,
        context,
        text
    )
    context.user_data['msg_to_delete'] = message.message_id
    return 'HANDLE_EVENT_TEXT'


def ask_age(update, context):
    text = '–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏)'
    answer_to_user(
        update,
        context,
        text,
        add_back_button=False,
    )
    return 'HANDLE_AGE'


def ask_activity(update, context):
    text = '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    answer_to_user(
        update,
        context,
        text,
        add_back_button=False,
    )
    return 'HANDLE_ACTIVITY'


def ask_stack(update, context):
    text = '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'
    answer_to_user(
        update,
        context,
        text,
        add_back_button=False,
    )
    return 'HANDLE_STACK'


def ask_hobby(update, context):
    text = '–ï—Å—Ç—å –ª–∏ —É –í–∞—Å —Ö–æ–±–±–∏? –ö–∞–∫–æ–µ?'
    answer_to_user(
        update,
        context,
        text,
        add_back_button=False,
    )
    return 'HANDLE_HOBBY'


def ask_purpose(update, context):
    text = '–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ —Ü–µ–ª–∏ –í—ã –æ–∂–∏–¥–∞–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å –≤ —Ö–æ–¥–µ –≤—Å—Ç—Ä–µ—á–∏'
    answer_to_user(
        update,
        context,
        text,
        add_back_button=False,
    )
    return 'HANDLE_PURPOSE'


def delete_event(update, context, event_id):
    Event.objects.filter(pk=event_id).delete()
    context.bot.answer_callback_query(
        update.callback_query.id,
        '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ'
    )
    return show_start_menu(update, context)


def edit_event(update, context, title=None, text=None):
    if title:
        if event_id := context.user_data.get('current_event'):
            Event.objects.filter(pk=int(event_id)).update(title=update.message.text)
        else:
            event = Event.objects.create(title=update.message.text)
            event.organizers.set(User.objects.filter(telegram_id=update.message.from_user.id))
            event_id = event.id
            context.user_data['current_event'] = event_id
    elif text:
        event_id = context.user_data['current_event']
        Event.objects.filter(pk=int(event_id)).update(description=update.message.text)

    event = Event.objects.get(pk=int(context.user_data['current_event']))

    keyboard = [
        [InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='title')],
        [InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='text')],
        [InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='delete')]
    ]
    text = f'<b>{event.title}</b>'
    if not event.started_at:
        text += '\n<b>–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã</b>'
    elif event.started_at < now():
        text += f'\n<b>–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>.\n' \
                f'–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è {event.finished_at.strftime("%d.%m.%Y")}.'
    else:
        text += f'\n–ü—Ä–æ—Ö–æ–¥–∏—Ç —Å {event.started_at.strftime("%d.%m.%Y")}' \
                f' –ø–æ {event.finished_at.strftime("%d.%m.%Y")}.'
    if event.description:
        text += f'\n\n{event.description[:80]} ...'
    text += '\n\n-----------\n' \
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. ' \
            '–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ' \
            f'<a href="{settings.EVENTS_URL.rstrip("/")}/tg_bot/event/{event.id}/change/">–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</a>'

    if msg_to_delete := context.user_data.get('msg_to_delete'):
        with suppress(TelegramError):
            context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=msg_to_delete
            )
        context.user_data['msg_to_delete'] = None
    answer_to_user(
        update,
        context,
        text,
        keyboard,
        parse_mode='HTML',
        image=f'media/{event.image.url}' if event.image else None
    )
    return 'HANDLE_EDIT_EVENT'


def save_member(update, context, **attrs):
    current_user = User.objects.get(telegram_id=update.effective_chat.id)
    for attr, value in attrs.items():
        if attr == 'meeters':
            event_id = context.user_data['current_event']
            event = Event.objects.get(pk=event_id)
            event.meeters.add(current_user)
            event.save()
            continue
        setattr(current_user, attr, value)
    current_user.save()
    return


def extend_speech(update, context):
    json_raw = update.callback_query.data.replace('extend_', '', 1)
    extending_data = json.loads(json_raw)
    moment = datetime.fromtimestamp(extending_data.get('ts', now().timestamp()))
    extending_time = extending_data.get('extend', 0)
    speech = Speech.objects.get_current(moment=moment)
    if not speech.finished_at < now():
        speech.finished_at += timedelta(minutes=extending_time)
        if extending_time == 0:
            speech.do_not_notify = True
        else:
            speech.do_not_notify = False
            with suppress(TelegramError):
                context.bot.answer_callback_query(
                    update.callback_query.id,
                    f'–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ {extending_time} –º–∏–Ω—É—Ç'
                )
        speech.save()

    with suppress(TelegramError):
        context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.effective_message.message_id
        )
